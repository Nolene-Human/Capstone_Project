{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my Capstone Project Documentation I used my Bachelor of Software Engineering final paper to build on my cybersecurity skills and knowledge set out in CyBOK (Cybersecurity Body of Knowledge) Networking, Cryptography and Software Security. By leveraging the CyBOK knowledgebase, I ensure my approach is rooted in the most up-to-date industry knowledge requirements. The knowledge not only equips me to address a wide range of cyber threats, but also add experience in the basic skills required. The Open Web Application Security Project (OWASP) principles are an essential component of this project, focusing specifically on the security of web applications. I followed the web security testing guide principles, addressing the most critical web application security risks and mitigate vulnerabilities effectively using various tools. By integrating OWASP principles with CyBOK, I want to build my knowledge and habit in proactively design, build and develop my environments and applications against common vulnerabilities. I have captured my learnings and journey on each topic. This Topics Network Security Application Security Cryptography \ud83d\ude80 == Wins \ud83d\udca2 == Hurdles \ud83d\udcaa == Learnings \ud83d\udc9c == Favourite","title":"Home"},{"location":"#welcome-to-my-capstone-project-documentation","text":"I used my Bachelor of Software Engineering final paper to build on my cybersecurity skills and knowledge set out in CyBOK (Cybersecurity Body of Knowledge) Networking, Cryptography and Software Security. By leveraging the CyBOK knowledgebase, I ensure my approach is rooted in the most up-to-date industry knowledge requirements. The knowledge not only equips me to address a wide range of cyber threats, but also add experience in the basic skills required. The Open Web Application Security Project (OWASP) principles are an essential component of this project, focusing specifically on the security of web applications. I followed the web security testing guide principles, addressing the most critical web application security risks and mitigate vulnerabilities effectively using various tools. By integrating OWASP principles with CyBOK, I want to build my knowledge and habit in proactively design, build and develop my environments and applications against common vulnerabilities. I have captured my learnings and journey on each topic. This Topics Network Security Application Security Cryptography \ud83d\ude80 == Wins \ud83d\udca2 == Hurdles \ud83d\udcaa == Learnings \ud83d\udc9c == Favourite","title":"Welcome to my Capstone Project Documentation"},{"location":"application/","text":"Goal The Journey During Design Security Requirements User management Authentication Authorization Data confidentiality Integrity Accountability Session management Transport security Tiered system segregation Legislative and standards compliance (including privacy, government, and industry standards) Secure: Flask provides built-in support for handling common web security features like cross-site request forgery (CSRF) protection and secure cookie handling. Step 1 : Basic Login and possible vulnerabilities Is started out with a standard login page and listed the common vulnerabilities. Step 2 : Improved vulnerabilities through design Next, I looked at the vulnerabilities that can be reduced through design. I removed any text and hints that can indicate to an hacker the possible solution I added additional steps References Testing for Account Enumeration and Guessable User Account 11 Common Authentication Vulnerabilities You Need to Know Week 2 categories of vulnerabilities CVEs and CWEs memory management vulnerabilities attacks code corruption attacks control-fow hijack attacks information leak attack data-only-attacks safe languages temporal vulnerabilities spatial vulnerabilities structured output generation vulnerabilities SQL injection command injection vulnerabilities script injection vulnerabilities (XSS) stored injection vulnerabilites higher-order injection vulnerabilities race condition vulnerabilities concurrency bugs time-of-check to time-of-use API vulnerabilities correct use correct implementation side-channel vulnerabilities software-based side-channels covert channels micro-architectual effects fault-injection attacks physical fault-injection software fault-injection Rowhammer prevention of vulnerabilities API design defensive programming sandboxing principle of least privilege assertions contracts coding practices coding guidelines MISRA dangerous functions programming idioms resource acquisition is initialisation move semantics smart pointers checking compliance erroneous execution trapped errors untrapped errors language design and type systems memory management mitigations immutable state dynamic checks static checks structured output generations mitigations type systems query generation race condition mitigation ownership aliasing information flow mitigating exploitation runtime detection of attacks stack canaries non-executable memory control fow integrity automated software diversity ASLR limiting privileges sandboxing monitors jails compartmentalisation object-capability systems detection of vulnerabilities","title":"Application"},{"location":"application/#during-design","text":"Security Requirements User management Authentication Authorization Data confidentiality Integrity Accountability Session management Transport security Tiered system segregation Legislative and standards compliance (including privacy, government, and industry standards) Secure: Flask provides built-in support for handling common web security features like cross-site request forgery (CSRF) protection and secure cookie handling. Step 1 : Basic Login and possible vulnerabilities Is started out with a standard login page and listed the common vulnerabilities. Step 2 : Improved vulnerabilities through design Next, I looked at the vulnerabilities that can be reduced through design. I removed any text and hints that can indicate to an hacker the possible solution I added additional steps References Testing for Account Enumeration and Guessable User Account 11 Common Authentication Vulnerabilities You Need to Know","title":"During Design"},{"location":"application/#week-2","text":"categories of vulnerabilities CVEs and CWEs memory management vulnerabilities attacks code corruption attacks control-fow hijack attacks information leak attack data-only-attacks safe languages temporal vulnerabilities spatial vulnerabilities structured output generation vulnerabilities SQL injection command injection vulnerabilities script injection vulnerabilities (XSS) stored injection vulnerabilites higher-order injection vulnerabilities race condition vulnerabilities concurrency bugs time-of-check to time-of-use API vulnerabilities correct use correct implementation side-channel vulnerabilities software-based side-channels covert channels micro-architectual effects fault-injection attacks physical fault-injection software fault-injection Rowhammer prevention of vulnerabilities API design defensive programming sandboxing principle of least privilege assertions contracts coding practices coding guidelines MISRA dangerous functions programming idioms resource acquisition is initialisation move semantics smart pointers checking compliance erroneous execution trapped errors untrapped errors language design and type systems memory management mitigations immutable state dynamic checks static checks structured output generations mitigations type systems query generation race condition mitigation ownership aliasing information flow mitigating exploitation runtime detection of attacks stack canaries non-executable memory control fow integrity automated software diversity ASLR limiting privileges sandboxing monitors jails compartmentalisation object-capability systems detection of vulnerabilities","title":"Week 2"},{"location":"cryptography/","text":"Goal The Journey schemes AES RSA DES PKCS DSA Kerberos TLS symmetric cryptography symmetric primitives block ciphers Feistel networks stream ciphers hash functions Merkel-Damgard construction sponge constructions symmetric encryption and authentication modes of operation ECB CBC OFB CFB CTR AEAD message authentication codes extendable output function key derivation functions public key encryption public key cryptography key encapsulation mechanisms constructions based on RSA RSA-OAEP RSA-KEM data encryption mechanisms constructions based on elliptic curves ECIES lattice-based constructions public key signatures full domain hash probabilistic signature schemes Schnorr signatures cryptographic security models basic security definitions security games random oracle model one-way passive attack indistinguishability chosen plaintext attacks chosen ciphertext attack universal forgery chosen message attack hard problems pseudo-random permutations pseudo-random functions discrete logarithm problem Dife-Hellman problem shortest vector problem post-quantum cryptography closest vector problem setup assumptions PKI simulation of cryptographic operations common reference strings good random number generation universal composability information-theoretically secure constructions one-time pad secret sharing Standard protocols authentication protocols encryption-based protocols message authentication-based protocols zero-knowledge-based protocols - pro key agreement protocols key confirmation forward secrecy unknown key share security key transport Diffie-Hellman key agreement station-to-station protocol advanced protocols oblivious transfer zero-knowledge \u03a3-protocols secure multi-party computation public-key schemes with special properties","title":"Cryptography"},{"location":"lessons/","text":"","title":"Learnings"},{"location":"networking/","text":"Goal In this assignment, my goal was to look at ways on how individuals can improve their SOHO network security. I followed the Zero Trust model, deepened my understanding of the CyBOK Network Security principles through building a webserver and hosting my application on-prem. \ud83e\uddb9 This allowed me create a sandbox to test various case studies of a home business requirements. Application Layer Threats: Distributed denial-of-service attacks (DDoS) attacks, HTTP floods, SQL injections, cross-site scripting, parameter tampering, and Slowloris attacks, Presentation Layer Threats: Phishing attacks, Session Layer Threats: Hijacking attacks, Transport Layer Threats: Reconnaissance and DoS attacks, Network Layer Threats: Man-in-the-middle attacks, Data-Link Layer Threats: Spoofing attacks, Physical Layer Threats: Sniffing attacks. The Journey Step 1: Install Linux Ubuntu Dual Boot Windows machine with Linux Ubuntu Hardware setup and Troubleshooting \ud83d\udca2 Windows initially did not allow dual-boot (or reboot Windows) until I entered the Bitlocker Key that I did not have. \ud83d\udcaa The solution was to enable SECURE BOOT again and run the following CLI command to find the key on the laptop. manage-bde -protectors <the drive usually c>: -get Finding the solution took a few videos, but I finally got Bitlocker fully disabled. It is worth noting that Bitlocker is Windows additional data encryption security feature and disabling this opens up the machine to attacks. However, as demonstrated by Andy Malone MVP in How to HACK Windows Bitlocker - MUST SEE! , it is not hard to find this key and the convenience of having it off is currently exceeding the security benefit. Resources How to Disable Bitlocker Encryption in Windows 11 Find Your BitLocker Recovery Key Step 2: Install Webserver I instaled NGINX , instead of the other option Apache, as the researched showed Nginx to be more secure. Tool Description Flask Web Application Framework SQLite3 Database Gunicorn Web Server Gateway Interface Nginx Proxy Server Cloudflare DNS Step 3: Port Forwarding Tool Description Cloudflare Tunnel Step 4: Improve Security Security Goals Identify common vulnerabilites of a SOHO Network and ways to prevent them. LAN Architecture Attacker Models STRIDE Spoofing Tampering Repudiation Information disclosure (privacy breach or data leak) Denial of service Elevation of privilege MITRE ATT&CK Name Description Reconnaissance The adversary is trying to gather information they can use to plan future operations. Resource Development The adversary is trying to establish resources they can use to support operations. Initial Access The adversary is trying to get into your network. Execution The adversary is trying to run malicious code. Persistence The adversary is trying to maintain their foothold. Privilege Escalation The adversary is trying to gain higher-level permissions. Defense Evasion The adversary is trying to avoid being detected. Credential Access The adversary is trying to steal account names and passwords. Discovery The adversary is trying to figure out your environment. Lateral Movement The adversary is trying to move through your environment. Collection The adversary is trying to gather data of interest to their goal. Command and Control The adversary is trying to communicate with compromised systems to control them. Exfiltration The adversary is trying to steal data. Impact The adversary is trying to manipulate, interrupt, or destroy your systems and data. /Optimizing server networks and web application firewall configuration /Reviewing and performance-testing existing server systems and web products /Hardening networks, hosts, web servers and applications /Implementing web server controls and active defense mechanisms /Using command-line utilities to test web servers and extract logs /User account management /Structured Query Language (SQL) /Network traffic packet capture /The vi editor /Backup and restore /Hardware setup and troubleshooting /Network routers and firewalls /Network switches /Optimizing server networks and web application firewall configuration /Reviewing and performance-testing existing server systems and web products /Hardening networks, hosts, web servers and applications /Implementing web server controls and active defense mechanisms /Using command-line utilities to test web servers and extract logs Firewalls Scripting and programming laguages Knowledge of network design and infrastructure Security Website hosting DNS Services Networking Applications Local Area Networks (LANs) Connected Networks and the Internet Bus Networks **Wireless Networks** Fully Distributed Networks: DHTs and Unstructured P2P Networks Software-Defned Networking and Network Function Virtualisation Network Protocols and Their Security Security at the Application Layer Email and Messaging Security Hyper Text Transfer Protocol Secure (HTTPS) DNS Security Network Time Protocol (NTP) Security Distributed Hash Table (DHT) Security Anonymous and Censorship-Free Communication Security at the Transport Layer TLS (Transport Layer Security) Public Key Infrastructure TCP Security UDP Security QUIC Security at the Internet Layer IPv4 Security IP Spoofng Fragmentation Attacks VPNs and IPsec NAT IPv6 Security Routing Security Within an Autonomous System (AS) Across ASs ICMP Security Security on Link Layer Port-based Network Access Control (IEEE 802.1X) WAN Link-Layer Security Attacks on Ethernet Switches Address Resolution Protocol (ARP) / Neighbor Discovery Protocol (NDP) Network Segmentation Wireless Security Bus Security Network Security Tools Firewalling Application Gateway (AG) Circuit-level Gateway (CG) DMZ Intrusion Detection and Prevention Systems Intrusion Prevention System (IPS) Network Security Monitoring SDN and NFV Security Network Access Control Zero Trust Networking DoS Countermeasures Other Network Security Topics","title":"Network"},{"location":"networking/#step-1-install-linux-ubuntu","text":"Dual Boot Windows machine with Linux Ubuntu Hardware setup and Troubleshooting \ud83d\udca2 Windows initially did not allow dual-boot (or reboot Windows) until I entered the Bitlocker Key that I did not have. \ud83d\udcaa The solution was to enable SECURE BOOT again and run the following CLI command to find the key on the laptop. manage-bde -protectors <the drive usually c>: -get Finding the solution took a few videos, but I finally got Bitlocker fully disabled. It is worth noting that Bitlocker is Windows additional data encryption security feature and disabling this opens up the machine to attacks. However, as demonstrated by Andy Malone MVP in How to HACK Windows Bitlocker - MUST SEE! , it is not hard to find this key and the convenience of having it off is currently exceeding the security benefit. Resources How to Disable Bitlocker Encryption in Windows 11 Find Your BitLocker Recovery Key","title":"Step 1: Install Linux Ubuntu"},{"location":"networking/#step-2-install-webserver","text":"I instaled NGINX , instead of the other option Apache, as the researched showed Nginx to be more secure. Tool Description Flask Web Application Framework SQLite3 Database Gunicorn Web Server Gateway Interface Nginx Proxy Server Cloudflare DNS","title":"Step 2: Install Webserver"},{"location":"networking/#step-3-port-forwarding","text":"Tool Description Cloudflare Tunnel","title":"Step 3: Port Forwarding"},{"location":"networking/#step-4-improve-security","text":"Security Goals Identify common vulnerabilites of a SOHO Network and ways to prevent them. LAN Architecture Attacker Models","title":"Step 4: Improve Security"},{"location":"networking/#stride","text":"Spoofing Tampering Repudiation Information disclosure (privacy breach or data leak) Denial of service Elevation of privilege","title":"STRIDE"},{"location":"networking/#mitre-attck","text":"Name Description Reconnaissance The adversary is trying to gather information they can use to plan future operations. Resource Development The adversary is trying to establish resources they can use to support operations. Initial Access The adversary is trying to get into your network. Execution The adversary is trying to run malicious code. Persistence The adversary is trying to maintain their foothold. Privilege Escalation The adversary is trying to gain higher-level permissions. Defense Evasion The adversary is trying to avoid being detected. Credential Access The adversary is trying to steal account names and passwords. Discovery The adversary is trying to figure out your environment. Lateral Movement The adversary is trying to move through your environment. Collection The adversary is trying to gather data of interest to their goal. Command and Control The adversary is trying to communicate with compromised systems to control them. Exfiltration The adversary is trying to steal data. Impact The adversary is trying to manipulate, interrupt, or destroy your systems and data. /Optimizing server networks and web application firewall configuration /Reviewing and performance-testing existing server systems and web products /Hardening networks, hosts, web servers and applications /Implementing web server controls and active defense mechanisms /Using command-line utilities to test web servers and extract logs /User account management /Structured Query Language (SQL) /Network traffic packet capture /The vi editor /Backup and restore /Hardware setup and troubleshooting /Network routers and firewalls /Network switches /Optimizing server networks and web application firewall configuration /Reviewing and performance-testing existing server systems and web products /Hardening networks, hosts, web servers and applications /Implementing web server controls and active defense mechanisms /Using command-line utilities to test web servers and extract logs Firewalls Scripting and programming laguages Knowledge of network design and infrastructure Security Website hosting DNS Services Networking Applications Local Area Networks (LANs) Connected Networks and the Internet Bus Networks **Wireless Networks** Fully Distributed Networks: DHTs and Unstructured P2P Networks Software-Defned Networking and Network Function Virtualisation Network Protocols and Their Security Security at the Application Layer Email and Messaging Security Hyper Text Transfer Protocol Secure (HTTPS) DNS Security Network Time Protocol (NTP) Security Distributed Hash Table (DHT) Security Anonymous and Censorship-Free Communication Security at the Transport Layer TLS (Transport Layer Security) Public Key Infrastructure TCP Security UDP Security QUIC Security at the Internet Layer IPv4 Security IP Spoofng Fragmentation Attacks VPNs and IPsec NAT IPv6 Security Routing Security Within an Autonomous System (AS) Across ASs ICMP Security Security on Link Layer Port-based Network Access Control (IEEE 802.1X) WAN Link-Layer Security Attacks on Ethernet Switches Address Resolution Protocol (ARP) / Neighbor Discovery Protocol (NDP) Network Segmentation Wireless Security Bus Security Network Security Tools Firewalling Application Gateway (AG) Circuit-level Gateway (CG) DMZ Intrusion Detection and Prevention Systems Intrusion Prevention System (IPS) Network Security Monitoring SDN and NFV Security Network Access Control Zero Trust Networking DoS Countermeasures Other Network Security Topics","title":"MITRE ATT&amp;CK"},{"location":"security/","text":"NETWORK For network security I implemented a server on a Small office Home Office (SOHO) local area network (LAN) on which the application will be hosted. Threat Modeling Vulnerability Analysis Exploitaiton Post Exploitation APPLICATION In this section I will document OWASP The Web Security Testing Framework of : Before development Software Development Life Cycle (SDLC) Requirements Login Screen Review Policies and Standards Develop Measurement and Metrics Criteria and Ensure Traceability During definition and design Review Security Requirements Review Design and Architecture Create and Review UML Models Create and Review Threat Models During Development Code Walkthrough Code Reviews During Deployment Application Penetration Testing Configuration Management Testing","title":"Security"},{"location":"security/#network","text":"For network security I implemented a server on a Small office Home Office (SOHO) local area network (LAN) on which the application will be hosted.","title":"NETWORK"},{"location":"security/#threat-modeling","text":"","title":"Threat Modeling"},{"location":"security/#vulnerability-analysis","text":"","title":"Vulnerability Analysis"},{"location":"security/#exploitaiton","text":"","title":"Exploitaiton"},{"location":"security/#post-exploitation","text":"","title":"Post Exploitation"},{"location":"security/#application","text":"In this section I will document OWASP The Web Security Testing Framework of :","title":"APPLICATION"},{"location":"security/#before-development","text":"","title":"Before development"},{"location":"security/#software-development-life-cycle-sdlc","text":"Requirements Login Screen","title":"Software Development Life Cycle (SDLC)"},{"location":"security/#review-policies-and-standards","text":"","title":"Review Policies and Standards"},{"location":"security/#develop-measurement-and-metrics-criteria-and-ensure-traceability","text":"","title":"Develop Measurement and Metrics Criteria and Ensure Traceability"},{"location":"security/#during-definition-and-design","text":"","title":"During definition and design"},{"location":"security/#review-security-requirements","text":"","title":"Review Security Requirements"},{"location":"security/#review-design-and-architecture","text":"","title":"Review Design and Architecture"},{"location":"security/#create-and-review-uml-models","text":"","title":"Create and Review UML Models"},{"location":"security/#create-and-review-threat-models","text":"","title":"Create and Review Threat Models"},{"location":"security/#during-development","text":"","title":"During Development"},{"location":"security/#code-walkthrough","text":"","title":"Code Walkthrough"},{"location":"security/#code-reviews","text":"","title":"Code Reviews"},{"location":"security/#during-deployment","text":"","title":"During Deployment"},{"location":"security/#application-penetration-testing","text":"","title":"Application Penetration Testing"},{"location":"security/#configuration-management-testing","text":"","title":"Configuration Management Testing"}]}